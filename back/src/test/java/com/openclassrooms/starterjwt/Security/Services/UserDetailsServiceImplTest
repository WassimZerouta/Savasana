package com.openclassrooms.starterjwt.security.services;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Optional;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

import com.openclassrooms.starterjwt.models.User;
import com.openclassrooms.starterjwt.repository.UserRepository;

@SpringBootTest
public class UserDetailsServiceImplTest {

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private UserDetailsServiceImpl userDetailsService;

    @Test
    @DisplayName("Load user by username")
    public void shouldLoadUserByUsername() {
        User mockUser = new User();
        mockUser.setId(1L);
        mockUser.setEmail("wasswass@gmail.com");
        mockUser.setFirstName("Wass");
        mockUser.setLastName("Wass");
        mockUser.setPassword("wass123");

        when(userRepository.findByEmail("wasswass@gmail.com")).thenReturn(Optional.of(mockUser));

        UserDetails userDetails = userDetailsService.loadUserByUsername("wasswass@gmail.com");

        assertNotNull(userDetails);
        assertEquals("wasswass@gmail.com", userDetails.getUsername());
        assertEquals("wass123", userDetails.getPassword());
        verify(userRepository, times(1)).findByEmail("wasswass@gmail.com");
    }

    @Test
    @DisplayName("Fail to load user by username when user not found")
    public void shouldThrowUsernameNotFoundException() {
        when(userRepository.findByEmail("aa@gmail.com")).thenReturn(Optional.empty());

        UsernameNotFoundException exception = assertThrows(UsernameNotFoundException.class, () -> {
            userDetailsService.loadUserByUsername("aa@gmail.com");
        });

        assertEquals("User Not Found with email: nonexistent@example.com", exception.getMessage());
        verify(userRepository, times(1)).findByEmail("aa@gmail.com");
    }
}